function:       drand48, erand48, irand48, krand48, lrand48, nrand48,
                mrand48, jrand48, srand48, seed48, lcong48
purpose:        generate uniformly distributed pseudo-random numbers

user access:    all users

synopsis:       double drand48()

                double erand48(s)
                unsigned short s[3];

                long irand48(m)
                unsigned short m;

                long krand48(s,m)
                unsigned short s[3], m;

                long lrand48()

                long nrand48(s)
                unsigned short s[3];

                long mrand48()

                long jrand48(s)
                unsigned short s[3];

                void srand48(seedval)
                long seedval;

                unsigned short *seed48(s)
                unsigned short s[3];

                void lcong48(param)
                unsigned short param[7];

Description

This family of functions generates pseudo-random numbers using well known
linear congruential algorithm and 48-bit integer arithmetic.

Functions drand48 and erand48 return non-negative double-precision floating-
point values uniformly distributed over the interval [0.0, 1.0).

Functions irand48 and krand48 return non-negative long integers uniformly
distributed over the interval [0, m-1].

Functions lrand48 and nrand48 return non-negative long integers uniformly
distributed over the interval [0, 2 ** 31).

Functions mrand48 and jrand48 return signed long integers uniformly
distributed over the interval [- 2 ** 31, 2 ** 31).

Functions srand48, seed48 and lcong48 are initialization entry points, one of
which should be invoked before either drand48, irand48, lrand48 or mrand48 is
called. (Although it is not recommended practice, constant default initializer
values will be supplied automatically if drand48, irand48, lrand48 or mrand48
is called without a prior call to an initialization entry point.) Functions
erand48, krand48, nrand48 and jrand48 do not require an initialization entry
point to be called first.

All the routine work by generating a sequence of 48-bit integer values, X[i],
according to the linear congruential formula

     X[n+1] = (a * X[n] + c) % M,    n >= 0

The parameter M = 2 ** 48; hence 48 bit integer arithmetic is performed.
Unless lcong48 has been invoked, the multiplier value a and the addend value c
are given by:

     a = 0x5DEECE66D
     c = 0xB

The value returned by any of the functions drand48, erand48, irand48, krand48,
lrand48, nrand48, mrand48 or jrand48 is computed by first generating the next
48-bit X[i] in the sequence. Then the appropriate number of bits, according to
the type of data item to be returned, are copied from the high order (left-
most) bits of X[i] and transformed into the returned value.

The functions drand48, irand48, lrand48 and mrand48 store the last 48-bit X[i]
generated in an internal buffer; that is why they must be initialized prior to
being invoked. The functions erand48, krand48, nrand48 and jrand48 require the
calling program to provide storage for successive X[i] values in the array
specified as an argument when the functions are invoked. That is why these
routines do not have to be initialized; the calling program merely has to
place the initial value of the X[i] into the array and pass it as an argument.
By using different arguments, functions erand47, krand48, nrand48 and jrand48
allow separate modules of a large program to generate several independent
streams of pseudo-random numbers, i.e., the sequence of numbers in each stream
will not depend upon how many times the routines have been called to generate
numbers for the other streams.

The initializer function srand48 sets the high-order 32 bits of X[i] to the 32
bits contained in its argument. The low order 16 bits are set to the arbitrary
value 0x330E.

The initializer function seed48 sets the value of X[i] to the 48-bit value
specified in the argument array. In addition, the previous value of X[i] is
copied into a 48-bit internal buffer, used only by seed48, and a pointer to
this buffer is the value returned by seed48. This returned pointer, which can
be just ignored if not needed, is useful if a program is to be restarted from
a given point at some future time - use the pointer to get at and store the
last X[i] value, and then use this value to reinitialize via seed48 when the
program is restarted.

The initialization function lcong48 allows the user to specify the initial
X[i], the multiplier value a, and the added value c. Argument array elements
param[0..2] specify X[i], param[3..5] specify the multiplier a, and param[6]
specifies the 16-bit addend c. After lcong48 has been called, a subsequent
call to either srand48 or seed48 will restore the "standard" multiplier and
addend values, a and c, as specified earlier.
