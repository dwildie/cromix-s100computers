utility:      CONVOBJ
purpose:      This program converts a .obj file to a .o68 file

user access:  all users

summary:      convobj [-jms] filename

arguments:    pathname of a .obj file

options:      -j  build jump table
              -m  write map
              -s  create a single module

Description

The Convobj utility converts the .obj files generated by the C compiler/code
generator to .o68 format to be used with the link68 linker. The conversion is
intended for the cases when a user wants complete control over the linking
process. The user must supply his own libraries and his own main module
(probably written in assembler). For each module the Convobj utility creates
up to three psects: CODE psect with REA and EXE attributes contains the code,
IDATA psect with REA and WRI attributes contains initialized data, and UDATA
psect with REA, WRI, and UNI attribute contains the uninitialized data. Global
variables are entry points, not common psects. All percent signs (%) in the
names are changed to dollar signs ($) because the Assembler does not allow the
use of the percent sign in the names. Static functions are moved to the global
module (with the name being the original file name). Static functions are not
entry points. They are accessed through the global module entry point. The
code of each module, including the jump table, is limited to 32 K bytes.

Options

The -j option generates a jump table to access the external functions.  This
ensures that the Link68 utility will not generate the overflow errors. The -j
option is not needed if the generated .bin program is small enough. Only if
the Link68 utility reports word overflow errors the -j option should be used
to generate long references to external functions.

The -m option causes an entry point map to be generated on a file with the
extension .cmp. The entry point map might be useful in case static functions
are used, to find their location in the global module.

The -s option squeezes all the modules in one file into a single module.
Non-static functions still have entry points, but those entry points are all
located in the same CODE psect--the only one.

Example

     jim[1] convobj -sm test

will convert test.obj file to test.o68 file. The test.o68 file will contain a
single module with all functions concatenated together. The entry point map
will be written to the file test.cmp.
