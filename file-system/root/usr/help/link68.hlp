utility:      LINK68
purpose:      This program links .o68 files.

user access:  all users

summary:      link68 [options] [-o outname] filename . . .
              filename [-s libname] . . .

arguments:    one or more filenames

              optional library name, preceded by -s

options:      -a0  value of A0 register
              -a1  value of A1 register
              -a2  value of A2 register
              -a3  value of A3 register
              -a4  value of A4 register
              -a5  value of A5 register
              -a6  value of A6 register
              -a7  value of A7 register
              -n   no map
              -o   output file name
              -q   do not display map
              -s   search library
              -x   lsect alignment size
              -y   unformatted output
              -z   memory size
              -r   produce ROMable code
              -d   data address

Description

The Link68 utility is a two-pass virtual linker. From one or more input files,
Link68 generates an executable binary file with a ".bin" filename extension.
Link68 can be used to generate absolute images of standalone programs, such as
the Cromix-Plus Operating System.

Options

The -an option, where 0 <= n <= 7, specifies the address to be loaded into the
An register. Link68 uses this address to generate the A register with offset
types of effective addresses. This option should be used only if the ".o68"
files being linked were generated by nonstandard programs.

The -n option prevents creation of a link map. If -n is not specified, a link
map is created and written to a file with the filename extension ".map".

The -o option, with a filename as an argument, specifies the output filename.
If -o is not specified, the output file has the name of the first relocatable
file specified on the command line, with the filename extension ".bin".

The -q option inhibits display of the link map on the terminal. If -q is not
specified, the link map is displayed.

The -s option, with a library filename as an argument, specifies a library to
be searched. To search more than one library, use multiple -s options. Link68
searches the ".o68" file for necessary functions.

The -x option, with a hex number as an argument, defines the padding size of
each linked lsect. The size of each lsect will be a multiple of this padding
size. If -x is not specified, the value 4096 is used.

The -y option, with a hex number as an argument, specifies the starting
address of an absolute image. When -y is specified, the generated output file
has no internal structure. cromix.sys is an example of a file linked in this
way.

The -z option defines the amount of free memory to be added to the end of the
binary file. This memory can be used for stack or any other purpose.

The -r option is used to produce code that can be written into ROM, (ROMable
code). With the -r option, only three types of Psects are allowed:

          REA,EXE       Code Psect
          REA,WRI       Initialized data Psect
          REA,WRI,UNI   Uninitialized data Psect

The -r option has the effect that the initialized data Psect is included
twice: The initializing data is appended to the end of the code Psect, the
initialized data itself is referenced at the end of uninitialized data Psect.
This implies that only two sections are finally produced, the code section
that also contains the initializing data, and the uninitialized data section
than also provides room for a copy of the initialized data. The idea is that
the first thing such a program must do is to copy the initialized data from
the code section to the data section and, if necessary, zap the rest of
uninitialized data. In order for the program to be able to do that, Link68
provides eight entry points with the following meaning:

     _cbegin        points to the first byte of code
     _cend          points to the first byte following code
     _ibegin        points to the first byte of the copy of
                    the initialized data
     _iend          points to the first byte following the copy
                    of the initialized data

     _ubegin        points to the first byte of unitialized data
     _uend          points to the first byte following the
                    unitialized data
     _dbegin        points to the first byte where initialized
                    data has been copied
     _dend          points to the byte following the initialized data

If the program is linked with the -r option, the first thing the program must
do is

     to zap (_uend - _ubegin) bytes at address _ubegin
       (if not zapped already)
     to copy (_iend - _ibegin) bytes from address _ibegin
       to address _dbegin

This scheme applies to any program linked with the -r option, indepedent of
other options (like -y and -d).

The -d option, used together with the -r and -y options, can be used to
specify the address of the data section. The -d characters must be followed by
a space and the data address in hexadecimal.

If the code is intended to go into ROM, in addition to the -r option,

     the -y option has to be used to get rid of Lsect headers and to
       specify the code address (ROM address),
     the -d option has to be used to assign the data segment to a RAM address.

